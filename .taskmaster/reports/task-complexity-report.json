{
	"meta": {
		"generatedAt": "2025-09-09T13:34:52.193Z",
		"tasksAnalyzed": 32,
		"totalTasks": 32,
		"analysisCount": 32,
		"thresholdScore": 5,
		"projectName": "codex-session-viewer",
		"usedResearch": true
	},
	"complexityAnalysis": [
		{
			"taskId": 29,
			"taskTitle": "Initialize Project Foundation",
			"complexityScore": 3,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Expand this task into subtasks for setting up a new Vite+React+TS project. Include steps for installing and configuring Tailwind CSS with the Headless UI plugin, setting up a basic Zustand store for global state, and creating the initial directory structure for components, hooks, services, and types.",
			"reasoning": "This is a foundational, greenfield task. The complexity is low-to-moderate because it involves integrating multiple standard tools (Vite, TS, Tailwind, Zustand) and ensuring their configurations work together correctly. It requires creating several config files (`vite.config.ts`, `tailwind.config.ts`, `postcss.config.js`) and establishing the initial directory structure (`src/components`, `src/hooks`, `src/store`, etc.) from scratch."
		},
		{
			"taskId": 30,
			"taskTitle": "Define Core Data Models in TypeScript",
			"complexityScore": 1,
			"recommendedSubtasks": 1,
			"expansionPrompt": "This task is simple enough that it doesn't require further expansion. Create a single TypeScript file, `src/types/session.ts`, and define and export the interfaces for `SessionMeta`, `ResponseItem`, `FileChange`, and `ParsedSession` as described in the project requirements.",
			"reasoning": "This is a very low-complexity task. It consists of creating a single file (`src/types/session.ts`) and writing TypeScript interface definitions. There is no runtime logic, UI, or complex configuration involved. It is a purely declarative task that is fundamental for the rest of the application's type safety."
		},
		{
			"taskId": 33,
			"taskTitle": "Implement Session Loading via Drag-and-Drop",
			"complexityScore": 4,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Expand this task into subtasks for implementing drag-and-drop file loading. The subtasks should cover: 1. Creating the UI drop zone within the main application view (e.g., `WelcomeScreen.tsx`) and adding the necessary `dragover`, `dragleave`, and `drop` event handlers with `preventDefault`. 2. Implementing the logic within the `drop` handler to access the file from the `DataTransfer` object. 3. Passing the file to the existing JSONL parser service and updating the application's Zustand store with the parsed session data, including handling loading and error states.",
			"reasoning": "This task involves direct DOM manipulation and event handling (`dragover`, `drop`), which adds a layer of complexity over typical React component logic. It requires modifying a core UI component (e.g., `App.tsx` or a welcome screen), correctly handling the browser's File API via `DataTransfer`, and integrating with two other parts of the system: the streaming parser (Task 31) and the state management store."
		},
		{
			"taskId": 51,
			"taskTitle": "Implement Export to HTML",
			"complexityScore": 5,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Expand this task into subtasks for implementing an 'Export to HTML' feature. The subtasks should include: 1. Creating a new export utility module (e.g., `src/lib/export.ts`). 2. Defining a function that generates a self-contained HTML document as a string, including inlined CSS for styling. 3. Implementing the logic to transform an array of `ResponseItem` objects into formatted HTML elements within the document string. 4. Adding a UI button that uses a Zustand selector to get the current events, calls the export utility, and triggers a client-side download of the resulting HTML blob.",
			"reasoning": "This task is more complex than a simple data export (like JSON) because it involves generating presentation (HTML and CSS). The main challenge is creating a robust function that transforms session events into a well-structured, self-contained HTML document with inlined styles. This requires both data transformation logic and string-based HTML/CSS generation, which can be tedious to get right. It also depends on existing export/download patterns (Task 44)."
		},
		{
			"taskId": 50,
			"taskTitle": "Implement Artifact Extraction and Download",
			"complexityScore": 6,
			"recommendedSubtasks": 4,
			"expansionPrompt": "Expand this task into subtasks for implementing artifact extraction and download. The subtasks should cover: 1. Installing the `jszip` library and creating a wrapper service in `src/lib/zip.ts`. 2. Creating a function that filters the main event list for 'Artifact' events and uses the `jszip` service to asynchronously generate a zip blob containing the artifact contents. 3. Building a new UI component (`ArtifactsPanel.tsx`) to list discovered artifacts and provide a 'Download All' button. 4. Integrating this new panel into the main session view and wiring the button to the zip generation and download logic.",
			"reasoning": "This task's complexity comes from introducing a significant new client-side dependency (`jszip`) for creating zip archives in the browser. The implementation requires learning and using the `jszip` API, handling the asynchronous generation of a potentially large zip blob without blocking the UI, creating a new UI component to display the artifacts, and wiring everything together. It's a self-contained but multi-step feature."
		},
		{
			"taskId": 32,
			"taskTitle": "Implement Session Loading via File Picker",
			"complexityScore": 3,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Expand this task into subtasks for implementing file loading via a file picker. The subtasks should cover: 1. Creating the UI button and a visually hidden `<input type='file' accept='.jsonl'>` element in the appropriate component (e.g., `WelcomeScreen.tsx`). 2. Implementing the `onChange` event handler on the input element to access the selected `File` object from the event. 3. Connecting the handler to the existing session parser service and Zustand store to process the file and update the application state upon successful load.",
			"reasoning": "This is a standard web development task with a well-defined pattern. The complexity is low as it primarily involves wiring a standard HTML element (`<input type='file'>`) to existing application logic (the parser from Task 31 and the state store). It's slightly simpler than drag-and-drop as it relies on a single `onChange` event rather than multiple coordinated drag events."
		},
		{
			"taskId": 47,
			"taskTitle": "Implement Deep Linking and URL State",
			"complexityScore": 7,
			"recommendedSubtasks": 5,
			"expansionPrompt": "Expand this task into subtasks for implementing URL-based state management. The subtasks should cover: 1. Designing a serialization format (e.g., URL-safe JSON or a custom format) for the state to be persisted. 2. Creating a custom hook (`useUrlStateSync.ts`) that subscribes to relevant slices of the Zustand store (e.g., filters, selected event ID). 3. Implementing a `useEffect` within the hook to serialize state changes and update `window.location.hash`. 4. Implementing logic that runs on application startup to parse the `window.location.hash`, deserialize it, and hydrate the Zustand store. 5. Integrating the hook into the top-level `App.tsx` component and carefully selecting which state to synchronize to avoid performance issues or infinite loops.",
			"reasoning": "This task is deceptively complex. Synchronizing application state with the URL requires careful management of the component lifecycle and state updates to avoid infinite loops (state change -> URL update -> component re-read -> state change). It involves creating a robust two-way binding between the Zustand store and the browser's Location API, including serialization/deserialization logic and careful handling of the initial app load. This touches the core architecture of the application's state flow."
		},
		{
			"taskId": 48,
			"taskTitle": "Implement Session Library with IndexedDB",
			"complexityScore": 8,
			"recommendedSubtasks": 7,
			"expansionPrompt": "The existing subtasks provide an excellent breakdown. Re-generate them, ensuring they cover: 1. Defining the IndexedDB schema and creating a DB service using the `idb` library. 2. Implementing the core data access layer (CRUD functions) for session entries. 3. Integrating session saving into the file loader hook to write metadata to the DB on successful load. 4. Creating a new `SessionLibrary.tsx` component to display saved sessions. 5. Embedding the session library into the `WelcomeScreen.tsx`. 6. Implementing the re-open (using File System Access API handles) and remove functionality. 7. Adding robust error handling for all DB operations.",
			"reasoning": "This task has high complexity because it introduces a new persistence layer using a complex browser API, IndexedDB. It requires a full feature slice: a data access layer (`src/lib/session-db.ts`), modifications to existing file loading logic (`useFileLoader.ts`), a new UI component (`SessionLibrary.tsx`), and integration into the main welcome screen. The additional requirement to use persisted `FileHandle` objects for re-opening adds another layer of API interaction and complexity."
		},
		{
			"taskId": 42,
			"taskTitle": "Create Command History Timeline",
			"complexityScore": 4,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Expand this task into subtasks for creating a command history view. The subtasks should cover: 1. Creating a new `CommandHistoryView.tsx` component. 2. Implementing logic within this component to subscribe to the session's events, filter for `LocalShellCall` types, and group them with their corresponding output events (stdout/stderr). 3. Designing and implementing a custom rendering for these command-output pairs that is clearer than the generic event card. 4. Adding a UI control (e.g., a tab or button) in the main view to toggle the visibility of this specialized timeline.",
			"reasoning": "The complexity is moderate. While a simple version could just be a filter, the description 'clearly pair each command with its corresponding standard output' implies creating a new, specialized component. This component needs its own logic to process the event stream, group related events (the command and its output), and render them in a custom format, which is more involved than just reusing the existing generic timeline with a filter."
		},
		{
			"taskId": 31,
			"taskTitle": "Implement Streaming JSONL Parser",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement streaming jsonl parser.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 34,
			"taskTitle": "Create Session Metadata Display Panel",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on create session metadata display panel.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 35,
			"taskTitle": "Build Virtualized Timeline for Events",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on build virtualized timeline for events.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 36,
			"taskTitle": "Develop Basic Event Card Component",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on develop basic event card component.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 37,
			"taskTitle": "Implement Basic Full-Text Search",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement basic full-text search.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 38,
			"taskTitle": "Create File Tree Component",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on create file tree component.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 39,
			"taskTitle": "Integrate Basic Diff Viewer",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on integrate basic diff viewer.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 40,
			"taskTitle": "Implement Advanced Timeline Filters",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement advanced timeline filters.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 41,
			"taskTitle": "Add Syntax Highlighting to Diff Viewer",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on add syntax highlighting to diff viewer.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 43,
			"taskTitle": "Implement Event Bookmarking",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement event bookmarking.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 44,
			"taskTitle": "Implement Export to JSON",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement export to json.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 45,
			"taskTitle": "Implement Export to Markdown",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on implement export to markdown.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 46,
			"taskTitle": "Ensure Responsive UI Layout",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on ensure responsive ui layout.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 49,
			"taskTitle": "Optimize Large-File Parsing with a Web Worker",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on optimize large-file parsing with a web worker.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 52,
			"taskTitle": "Enhance Accessibility (a11y)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on enhance accessibility (a11y).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 53,
			"taskTitle": "Package as Web App or NPM Package (replace Electron)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on package as web app or npm package (replace electron).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 54,
			"taskTitle": "All Sessions View (auto-discovery + selector)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on all sessions view (auto-discovery + selector).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 55,
			"taskTitle": "Reload Sessions Button (re-scan without page refresh)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on reload sessions button (re-scan without page refresh).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 56,
			"taskTitle": "Newest-First Sorting for Detected Sessions",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on newest-first sorting for detected sessions.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 57,
			"taskTitle": "Complete Diff Viewer Functionality",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on complete diff viewer functionality.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 58,
			"taskTitle": "Filter‑Aware Granular Export",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on filter‑aware granular export.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 59,
			"taskTitle": "Theme Color Picker + Light/Dark Mode",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on theme color picker + light/dark mode.",
			"reasoning": "Automatically added due to missing analysis in AI response."
		},
		{
			"taskId": 60,
			"taskTitle": "Workspace Scanner for CWD + .codex/sessions (diff tracking)",
			"complexityScore": 5,
			"recommendedSubtasks": 3,
			"expansionPrompt": "Break down this task with a focus on workspace scanner for cwd + .codex/sessions (diff tracking).",
			"reasoning": "Automatically added due to missing analysis in AI response."
		}
	]
}