{
  "type": "FunctionCall",
  "name": "desktop-commander__edit_block",
  "args": "{\"file_path\":\"/home/user/projects/codex-session-viewer/src/App.tsx\",\"old_string\":\"                const filtered = full\\n                  .filter(({ key }) => (showBookmarksOnly ? has(key) : true))\\n                  .filter(({ ev }) => {\\n                    if (typeFilter === 'All') return true\\n                    const t = (ev as any).type\\n                    if (typeFilter === 'ToolCalls') {\\n                      return t === 'FunctionCall' || t === 'LocalShellCall' || t === 'WebSearchCall' || t === 'CustomToolCall'\\n                    }\\n                    if (typeFilter === 'Message') {\\n                      if (t !== 'Message') return false\\n                      if (roleFilter === 'All') return true\\n                      const role = (ev as any).role\\n                      return role === roleFilter\\n                    }\\n                    return t === typeFilter\\n                  })\\n                  .filter(({ ev }) => (typeFilter === 'All' && !showOther ? (ev as any).type !== 'Other' : true))\\n                  .filter(({ ev }) => (search ? matchesEvent(ev as any, search) : true))\\n                  .filter(({ ev }) => {\\n                    const q = pathFilter.trim()\\n                    if (!q) return true\\n                    const anyEv: any = ev\\n                    const p = (anyEv.path ? String(anyEv.path) : '').toLowerCase()\\n                    const qq = q.toLowerCase()\\n                    // Match if event has a path and it contains the query,\\n                    // otherwise fall back to a broad text match so commands/diffs referencing\\n                    // the path are also included.\\n                    if (p.includes(qq)) return true\\n                    return matchesEvent(anyEv, qq)\\n                  })\\n                return (\\n                  <TimelineView\",\"new_string\":\"                function getFilteredItems(input: { ev: any; key: string; absIndex: number }[] = full) {\\n                  return input\\n                    .filter(({ key }) => (showBookmarksOnly ? has(key) : true))\\n                    .filter(({ ev }) => {\\n                      if (typeFilter === 'All') return true\\n                      const t = (ev as any).type\\n                      if (typeFilter === 'ToolCalls') {\\n                        return t === 'FunctionCall' || t === 'LocalShellCall' || t === 'WebSearchCall' || t === 'CustomToolCall'\\n                      }\\n                      if (typeFilter === 'Message') {\\n                        if (t !== 'Message') return false\\n                        if (roleFilter === 'All') return true\\n                        const role = (ev as any).role\\n                        return role === roleFilter\\n                      }\\n                      return t === typeFilter\\n                    })\\n                    .filter(({ ev }) => (typeFilter === 'All' && !showOther ? (ev as any).type !== 'Other' : true))\\n                    .filter(({ ev }) => (search ? matchesEvent(ev as any, search) : true))\\n                    .filter(({ ev }) => {\\n                      const q = pathFilter.trim()\\n                      if (!q) return true\\n                      const anyEv: any = ev\\n                      const p = (anyEv.path ? String(anyEv.path) : '').toLowerCase()\\n                      const qq = q.toLowerCase()\\n                      if (p.includes(qq)) return true\\n                      return matchesEvent(anyEv, qq)\\n                    })\\n                }\\n                const filtered = getFilteredItems()\\n                return (\\n                  <TimelineView\",\"expected_replacements\":1}"
}
